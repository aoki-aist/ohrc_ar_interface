//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Ohrc
{
    [Serializable]
    public class StateMsg : Message
    {
        public const string k_RosMessageName = "ohrc_msgs/State";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        public Geometry.PoseMsg pose;
        public Geometry.TwistMsg twist;
        public Geometry.WrenchMsg wrench;
        public GripperMsg gripper;
        public bool enabled;
        public bool reset;
        public Geometry.Vector3Msg wave;

        public StateMsg()
        {
            this.header = new Std.HeaderMsg();
            this.pose = new Geometry.PoseMsg();
            this.twist = new Geometry.TwistMsg();
            this.wrench = new Geometry.WrenchMsg();
            this.gripper = new GripperMsg();
            this.enabled = false;
            this.reset = false;
            this.wave = new Geometry.Vector3Msg();
        }

        public StateMsg(Std.HeaderMsg header, Geometry.PoseMsg pose, Geometry.TwistMsg twist, Geometry.WrenchMsg wrench, GripperMsg gripper, bool enabled, bool reset, Geometry.Vector3Msg wave)
        {
            this.header = header;
            this.pose = pose;
            this.twist = twist;
            this.wrench = wrench;
            this.gripper = gripper;
            this.enabled = enabled;
            this.reset = reset;
            this.wave = wave;
        }

        public static StateMsg Deserialize(MessageDeserializer deserializer) => new StateMsg(deserializer);

        private StateMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
            this.twist = Geometry.TwistMsg.Deserialize(deserializer);
            this.wrench = Geometry.WrenchMsg.Deserialize(deserializer);
            this.gripper = GripperMsg.Deserialize(deserializer);
            deserializer.Read(out this.enabled);
            deserializer.Read(out this.reset);
            this.wave = Geometry.Vector3Msg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.pose);
            serializer.Write(this.twist);
            serializer.Write(this.wrench);
            serializer.Write(this.gripper);
            serializer.Write(this.enabled);
            serializer.Write(this.reset);
            serializer.Write(this.wave);
        }

        public override string ToString()
        {
            return "StateMsg: " +
            "\nheader: " + header.ToString() +
            "\npose: " + pose.ToString() +
            "\ntwist: " + twist.ToString() +
            "\nwrench: " + wrench.ToString() +
            "\ngripper: " + gripper.ToString() +
            "\nenabled: " + enabled.ToString() +
            "\nreset: " + reset.ToString() +
            "\nwave: " + wave.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
